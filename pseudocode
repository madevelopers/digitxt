// The dictionary of numbers.
// Its value must be loaded from an external JSON file.
numbersDictionary = {};

// digitxt will just be a function that takes a single argument.
// That argument will be a numeric string so that it can handle
// really huge numbers
function digitxt(numericString) {
    // The storage for the converted decimal numbers
    decimal = '';

    // The storage for the converted whole numbers
    whole = [];

    // Lets make sure that the numeric string we're converting
    // is a clean one. So, let's do some sanitation job first.
    sanitizedNumber = sanitize(numericString);

    // Next, take that sanitized number and split it into two groups
    // wholeNumbers and decimals
    numberGroup = splitNumber(sanitizedNumber);

    // Then, loop through the whole numbers group and convert each
    // subgroup on its own denomination
    numberGroup.wholeNumbers.forEach(function (subgroup, index) {
        // Identify the denomination by its position.
        // The position must be grabbed from the end of the dictionary.
        denomIndex = numberGroup.wholeNumbers.length - index - 1;
        denomination = '';

        // Update the denomination only when its reaches the thousands
        // place and above
        if (denomIndex !== 0) {
            denomination = ' ' + numbersDictionary.huge[denomIndex]
        }

        // For efficiency, append the converted number to the whole
        // array and join them later
        whole.push(convertTillHundreds(subgroup) + denomination)
    });

    // Convert the decimals only when present
    if (numberGroup.decimals) {
        decimal = ' point ' + convertDecimals(numberGroup.decimals)
    }

    // Combine the whole numbers and decimals convertion
    // to create the final output
    return whole.join(' ') + decimals;
}


// functions used in digitxt
// =========================

function sanitize(numericString) {
    // This function ensures that the passed numeric string is a clean one
    // It will do a series of filters and replacements to achieve a
    // convertable version.

    // replace invalid characters with nothing
    // (valid characters are numbers 0-9 and period)
    numericString = numericString.replace(/[^\d\.]/ig, '');

    // remove multiple dot occurences
    numericString = numericString.replace(/\.{2,}/g, '.');

    // remove the last dot character if present
    numericString = numericString.replace(/\.$/, '');

    // remove leading zeroes
    numericString = numericString.replace(/^0+([^0]+)/, '$1');

    // prepend `0` if first character is a dot
    numericString = numericString.replace(/^\.(.+)/, '0.$1');

    // only single decimals allowed
    numericString = numericString.replace(/(\d+(\.\d+)?).*$/, '$1');

    return numericString;
}


function splitNumber(sanitizedNumericString) {
    // This function will split the numeric string into
    // two groups: wholeNumbers and decimals
    numSplit = sanitizedNumericString.split('.');

    // The first splitting stage only does the separation for whole numbers
    // and decimals. Whole numbers itself needs some splitting so let's
    // do it here.
    splittedWholeNumbers = splitWholeNumbers(numSplit[0]);

    // Then return the splitted number as an object literal
    return {
        wholeNumbers: splittedWholeNumbers,
        decimals: numSplit[1]
    };
}


function splitWholeNumbers(wholeNumber) {
    // This function will split the whole number intro groups of three
    // starting from the last position
    // Regex copied from http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
    wholeNumberRegroup = wholeNumber.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    wholeNumberSplits = wholeNumberRegroup.split(',');

    return wholeNumberSplits;
}


function convertDecimals(decimalNumber) {
    // This converts the decimal number to its text form.
    // Conversion here is easy because we don't have to worry about
    // the denominations. Just plain index matching does the trick.
    result = [];
    decimals = decimalNumber.split('');

    decimals.forEach(function (number) {
        result.push(numbersDictionary.onesteens[number]);
    });

    return result.join(' ');
}


function convertTillHundreds(hundredNumber) {
    // This the main conversion function. It converts the given number
    // to its text from but only until the hundreds place.
    // The number provided here must not exceed three digits.
    // The number passed must be of type Integer.
    // In order to properly convert, we need to get each individual places.
    tens = 0;
    ones = Math.floor(hundredNumber % 10);
    hundreds  = Math.floor(hundredNumber / 100);
    result = []

    if (hundredNumber > 9) {
        tens = Math.floor((hundredNumber % 100) / 10)
    }

    if (tens === 1) {
        tens = tens * 10 + ones;
    }

    if (tens > 9) {
        ones = 0;
    }

    if (hundreds > 0) {
        result.push(numbersDictionary.onesteens[hundreds] + ' hundred');
    }

    if (tens === 0) {
        // Handle ones value
        if (!(hundreds > 0 && ones === 0)) {
            result.push(numbersDictionary.onesteens[ones]);
        }
    } else if (tens === 1) {
        // Handle teens value
        result.push(numbersDictionary.onesteens[tens]);
    } else if (tens > 1) {
        tys = numbersDictionary.tys[tens]

        if (ones > 0) {
            tys = tys + ' ' + numbersDictionary.onesteens[ones]
        }

        result.push(tys);
    }

    return result.join(' ');
}
